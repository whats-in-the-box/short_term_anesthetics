---
title: "Short-term administration of common anesthetics does not dramatically change the endogenous peptide profile in the rat pituitary"
author: "Somayeh Mousavi, **Haowen Qiu**, Frazer I. Heinis, Md Shadman Ridwan Abid, Matthew T. Andrews & James W. Checco"
date: "2022-09-20"
abstract: "Cell-cell signaling peptides (e.g., peptide hormones, neuropeptides) are among the largest class of cellular transmitters and regulate a variety of physiological processes. To identify and quantify the relative abundances of cell-cell signaling peptides in different physiological states, LC-MS-based peptidomics workflows are commonly utilized on freshly dissected tissue. In such animal experiments, the administration of general anesthetics is an important step for many research projects. However, acute anesthetic administration may rapidly change the measured abundance of transmitter molecules and metabolites, especially in the brain and endocrine system, which would confound experimental results. The aim of this study was to evaluate the effect of short-term (< 5 min) anesthetic administration on the measured abundance of cell-cell signaling peptides, as evaluated by a typical peptidomics workflow. To accomplish this goal, we compared endogenous peptide abundances in the rat pituitary following administration of 5% isoflurane, 200 mg/kg sodium pentobarbital, or no anesthetic administration. Label-free peptidomics analysis demonstrated that acute use of isoflurane changed the levels of a small number of peptides, primarily degradation products of the hormone somatotropin, but did not influence the levels of most other peptide hormones. Acute use of sodium pentobarbital had a negligible impact on the relative abundance of all measured peptides. Overall, our results suggest that anesthetics used in pituitary peptidomics studies do not dramatically confound observed results."
doi: "https://doi.org/10.1021/acschemneuro.2c00359"
execute:
  echo: true
  #cache: true
format: 
  html:
    toc: true
    toc-location: left
    reference-location: document
    cold-fold: true
    theme: flatly
    self-contained: true
    #cache: true

comments: 
        hypothesis: true
---

```{r message=FALSE, warning=FALSE, results='hide'}
suppressPackageStartupMessages(c(
  library(tidyverse),
  library(knitr),
  library(statTarget),
  library(impute),
  library(cowplot),
  library(proBatch),
  library(pcaMethods),
  library(pROC)
  ))
FDR <- 0.05
LOG2FC <- 0.6
# get start time
start_time <- Sys.time()
```

```{r message = FALSE, warning = FALSE, echo=FALSE}
script_folder = "../scripts/"

source(paste(script_folder, "normalization.R", sep = ""))
source(paste(script_folder, "multivariate.R", sep = ""))
source(paste(script_folder, "visual_functions.R", sep = ""))

```


## Project and data background

In this study, we applied a non-targeted LC--MS and LC--MS/MS-based peptidomics approach to pituitary and hypothalamus tissue peptide extract collected from rats went under "No Anesthesia", "5% Isoflurane" and "200 mg/kg Sodium Pentobarbital" anesthesia to explore differences in the profile of peptides caused by short-term anesthetics.

::: {#fig-analytical_workflow layout-ncol="1"}
![](Figure_1.png)

Overview of experimental design.

:::

::: {.column-margin}

Rats were separated into “No Anesthesia”, “5% Isoflurane”, or “200 mg/kg Sodium Pentobarbital” groups. For each group, animals were subjected to the indicated condition prior to rapid decapitation and pituitary isolation, after which pituitaries were flash frozen. Peptides were then extracted from pituitary samples and analyzed using an LC-MS and LC-MS/MS peptidomics workflow. 

:::

## Label-free peptidomics

Total umber of samples after LC-MS: 32

* No: 10 samples

* Iso: 11 samples

* SP: 11 samples

Total number of feature provided: 237

Three step data processing:

* Batch correction

* Log2 transformation

* EigenMS normalization

::: {.panel-tabset .column-page-inset-right}

#### Batch correction

Batch correction using package `statTarget` evaluates the missing values and a feature will be kept if it has non-zero value for at least 50% of samples (`statTarget` default is 80%) in any one group (remove **71** features). It then imputes missing values for the present features and QC-based signal correction. At last, it removes features CV% > 50% (default, removes **2** features).

```{r message=FALSE, warning=FALSE}
pheno <- "data/meta4samples.csv"
dfile = "data/data4samples.csv"

statTarget::shiftCor(pheno, dfile,  QCspan = 0.25, Frule = 0.5,
                     degree = 2,imputeM = "KNN", ntree=500, coCV = 50)
```


```{r}
fh = read.csv(file = "statTarget/shiftCor/After_shiftCor/shift_sample_cor.csv",header = TRUE, row.names = 1, stringsAsFactors = FALSE, sep = ",") %>%
        t(.) %>%
        as.data.frame()
labels_d1 <- as.matrix(fh[1,])
N_feature = nrow(fh[-1,])

# change row annotation for heatmap
fh_mod = read.csv(file = "statTarget/shiftCor/After_shiftCor/shift_sample_cor_mod.csv",header = TRUE, row.names = 1, stringsAsFactors = FALSE, sep = ",") %>%
        t(.) %>%
        as.data.frame()

feature_name = as.matrix(fh_mod[-1, "sample"]) %>%
        `rownames<-`(rownames(fh_mod)[-1]) %>%
        `colnames<-`("name") %>%
        as.data.frame() %>%
        rownames_to_column(., var = "variable")

```

* Features = `r N_feature`

Data preview (after batch correction)

```{r}
#rownames(fh)[-1] == feature_name$variable
rownames(fh)[-1] = feature_name$name
# display table
fh %>% 
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```

#### Log2 transformation

Data transformation applies a mathematical transformation on individual values themselves. For mass spec data, log transformation is a good choice, as it reduces or removes the skewness of mass spec data. 

```{r message=FALSE, warning=FALSE, results=FALSE}
d1 <- fh[-1,]
anno = data.frame(Label = as.factor(t(fh)[, "class"]))
log2_d1 <- log2(type.convert(d1)) ## log2 transformation
# save data
#write.csv(log2_d1, file.path(WORKING_DIR, "log2_transformed.csv"))

# draw histogram
hist_log2 <- ggplot_truehist(unlist(log2_d1), "Log2 Transformed")
qq_log2 <- ggplot_carqq(unlist(log2_d1), "Log2 Transformed")
pca_log2 <- ggplot_pca(log2_d1, anno, "Label","Log2 Transformed")
```


```{r fig.dim=c(18, 6), out.width= "100%", message = FALSE, warning = FALSE, results = "hide"}
plot_grid(hist_log2, qq_log2, pca_log2, nrow = 1)
```


```{r}
rownames(log2_d1) = feature_name$name
# display table
log2_d1 %>% 
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```


#### EigenMS normalization

After batch correction, missing value imputation and log transformation, the data was normalized using [EigenMS](https://doi.org/10.1371/journal.pone.0116221) to account for sample-to-sample variability. EigenMS normalization preserves the treatment group differences in the data by estimating treatment effects with an ANOVA model, then uses singular value decomposition on the model residual matrix to identify and remove the bias. 

```{r message=FALSE, warning=FALSE, eval=FALSE}
norm_d1 <- do_normalization_short(log2_d1, labels_d1)

hist_eigenms <- ggplot_truehist(unlist(norm_d1[-1,]), "log2-EigenMS")
qq_eigenms <- ggplot_carqq(unlist(norm_d1[-1,]), "log2-EigenMS")
pca_eigenms <- ggplot_pca(norm_d1[-1,], anno, "Label","log2-EigenMS")
```

```{r message=FALSE, warning=FALSE, include=FALSE}
norm_d1 <- do_normalization_short(log2_d1, labels_d1)

hist_eigenms <- ggplot_truehist(unlist(norm_d1[-1,]), "log2-EigenMS")
qq_eigenms <- ggplot_carqq(unlist(norm_d1[-1,]), "log2-EigenMS")
pca_eigenms <- ggplot_pca(norm_d1[-1,], anno, "Label","log2-EigenMS")
```


```{r fig.dim=c(18, 6), out.width="100%"}
plot_grid(hist_eigenms, qq_eigenms, pca_eigenms, nrow = 1)
```


```{r}
norm_d1_mod = norm_d1[-1,] %>%
        as.data.frame() %>%
        rownames_to_column(., var = "rowname") %>%
        mutate(across(-rowname, as.numeric)) %>%
        column_to_rownames(., var = "rowname")
#write.csv(norm_d1_mod, file = "after_norm_data.csv")

#rownames(norm_d1_mod) == feature_name$variable
rownames(norm_d1_mod) = feature_name$name

# display table
norm_d1_mod %>% 
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```

#### Peak intensity plots

EigenMS removes sample-to-sample variability. 

::: {.panel-tabset}

##### Intensity after log2 transformation


```{r message=FALSE, warning=FALSE, echo=FALSE}

meta = read.csv(file = "data/meta4samples.csv", header = TRUE)

color_list = sample_annotation_to_colors(meta, factor_columns = c("batch", "class"), numeric_columns = "order")

# after log2 transformation
log2_d1_long = matrix_to_long(log2_d1, sample_id_col = "sample")

plot_boxplot(log2_d1_long, meta, sample_id_col = "sample", batch_col = "batch", color_scheme = color_list[["batch"]], ylimits = c(-15,30)) + ylab("Intensity (log2 scale)") # y-range = 45 for comparison purpose

```


##### Intensity after EigenMS normalization


```{r message=FALSE, warning=FALSE, echo=FALSE}
#after normalization
norm_d1_long = matrix_to_long(norm_d1_mod, sample_id_col = "sample")

plot_boxplot(norm_d1_long, meta, sample_id_col = "sample", batch_col = "batch", color_scheme = color_list[["batch"]], ylimits = c(-15,30)) + ylab("Intensity (log2 scale, after normalization)") # y-range = 45 for comparison purpose
```


:::

:::

<!-- ::: {.column-margin} -->

<!-- | Name | Abbreviation | -->
<!-- |:----------:|:-------------------------------------:| -->
<!-- | pT | p-value from t-test | -->
<!-- | BHT | adjusted p-value for t-test | -->
<!-- | pW | p-value from Wilcoxon rank-sum test | -->
<!-- | BHW | adjusted p-value for Wilcoxon rank-sum test | -->
<!-- | FC(lin) | linear fold-change | -->
<!-- | FC(log2) | log2 fold-change | -->
<!-- | padj | minimum of BHT and BHW | -->
<!-- | -log10padj | -log10(padj) | -->
<!-- | Status | (up or down)-regulation | -->

<!-- : Result table column name abbreviation  -->

<!-- ::: -->

## Univariate analysis

Univariate statistic analysis will proceed for each pairs of comparison. For each pair,

Step 1, differential analysis;

* t-test

* Wilcoxon rank-sum test

For all statistical tests, the Benjamini-Hochberg (BH) procedure was applied to correct for multiple hypothesis testing. 

Step 2, fold change, both linear and log2;

Step 3, regulation shown in volcano plot.

* A feature is considered unregulated when `FC(log2)` > 0.6 (or `FC(lin)` > 1.5); 

* A feature is considered downregulated when `FC(log2)` < -0.6 (or `FC(lin)` < -1.5).

```{r}
d5 <- rbind.data.frame(labels_d1, norm_d1_mod) 
d5_mod <- t(d5) %>%
  as.data.frame(.) %>%
  rownames_to_column(., var = "rowname") %>%
  as_tibble() %>%
  dplyr::rename(., Label = class) %>%
  mutate(across(-c(Label,rowname), as.numeric)) %>%
  #rename_with(str_trim)
  column_to_rownames(., var = "rowname")

#colnames(d5_mod)[-1] == feature_name$variable
colnames(d5_mod)[-1] = feature_name$name

grps = as.factor(t(labels_d1))
trt= levels(grps)

combo_list = do.call("c", lapply(seq_along(time), function(i) combn(trt, 2, FUN = list))) # top 10 are unique combo
#combo_list = combo_list[1:10]

feature_meta = read.csv(file = "data/feature_meta.csv")
```


::: {.panel-tabset .column-page-inset-right}


### `r combo_list[[1]][1]` vs `r combo_list[[1]][2]`

::: {.panel-tabset}

#### Full stat 


```{r message=FALSE, warning=FALSE}
contrast = combo_list[[1]]

df = d5_mod %>%
    dplyr::filter(., Label %in% contrast ) %>%
    droplevels()

temp_d <- df %>%
        mutate(across(-Label, ~ 2^(.) )) %>% # d3_mod is log-scale number, this step will de-log and change data back to linear number
        group_by(Label) %>%
        summarise(across(everything(), mean))

print(paste("Order of Fold Change:", temp_d$Label[1], "over", temp_d$Label[2], sep = " "))

uni_res <- do_univariate(df, order = c("No", "Iso"))

uni_res <- uni_res %>%
        rowwise() %>%
        mutate(padj = min(c(BHT, BHW))) %>%
        # get the lowest padj
        ungroup() %>%
        mutate(`-log10padj` = -log10(padj))

uni_res_annotation = uni_res %>% left_join(., feature_meta, by = c("variable" = "Peptide"))

uni_res_annotation %>% 
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```


#### Significant stat


```{r}
# get DE features only tibble
uni_res_filt <- uni_res %>%
        dplyr::filter(BHT < FDR & BHW < FDR) %>%
        mutate(status = case_when(`FC(log2)` < - 0.6 ~ "Down",
                                  `FC(log2)` > 0.6 ~ "Up") )

if (nrow(uni_res_filt) == 0){
        print(paste("There is no significant differentiated features between",
                    temp_d$Label[2], "and", temp_d$Label[1], sep = " "))
} else {
        uni_res_filt = uni_res_filt %>%
                left_join(., feature_meta, by = c("variable" = "Peptide"))
        
        #write.csv(uni_res_filt, file = paste(combo_list[[i]][1], "vs", combo_list[[i]][2], ".csv", sep = ""))
        uni_res_filt %>% 
                knitr::kable(., digits = 3, "html") %>%
                kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
                kableExtra::scroll_box(width = "100%", height = "500px")
}

```


#### Volcano plot

```{r message=FALSE, warning=FALSE, fig.dim=c(6, 6)}
# volcano plot
volcano_plot(uni_res_annotation, feature_col = "variable", fdr = FDR, log2fc = LOG2FC, save = FALSE)
```


#### Heatmap 

```{r message=FALSE, warning=FALSE, fig.dim=c(15, 10)}
# heatmap
anno <- data.frame(Label = as.factor(t(d5)[, "class"])) %>%
        dplyr::filter(Label %in% contrast ) %>%
        droplevels()

hm <- d5[-1, d5[1,] %in% contrast ] %>%
        rownames_to_column("variable") %>%
        mutate(across(-variable, as.numeric)) #%>%
        #left_join(., feature_meta, by = c("variable" = "Feature"))

heatmap(hm, feature_col = "variable", sample_anno = anno, feature_anno = feature_meta, feature_label = "Peptide", rowname_switch = TRUE, save = FALSE)
```

:::

### `r combo_list[[2]][1]` vs `r combo_list[[2]][2]`

:::{.panel-tabset}

#### Full stat 


```{r message=FALSE, warning=FALSE}
contrast = combo_list[[2]]

df = d5_mod %>%
    dplyr::filter(., Label %in% contrast ) %>%
    droplevels()

temp_d <- df %>%
        mutate(across(-Label, ~ 2^(.) )) %>% # d3_mod is log-scale number, this step will de-log and change data back to linear number
        group_by(Label) %>%
        summarise(across(everything(), mean))

print(paste("Order of Fold Change:", temp_d$Label[1], "over", temp_d$Label[2], sep = " "))

uni_res = do_univariate(df, order = c("SP", "Iso"))

uni_res <- uni_res %>%
        rowwise() %>%
        mutate(padj = min(c(BHT, BHW))) %>%
        # get the lowest padj
        ungroup() %>%
        mutate(`-log10padj` = -log10(padj))

uni_res_annotation = uni_res %>% left_join(., feature_meta, by = c("variable" = "Peptide"))

uni_res_annotation %>% 
        #mutate(across(-variable, round, digit=3)) %>%
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```


#### Significant stat


```{r}
# get DE features only tibble
uni_res_filt <- uni_res %>%
        dplyr::filter(BHT < FDR & BHW < FDR) %>%
        mutate(status = case_when(`FC(log2)` < - 0.6 ~ "Down",
                                  `FC(log2)` > 0.6 ~ "Up") )

if (nrow(uni_res_filt) == 0){
        print(paste("There is no significant differentiated features between",
                    temp_d$Label[2], "and", temp_d$Label[1], sep = " "))
} else {
        uni_res_filt = uni_res_filt %>%
                left_join(., feature_meta, by = c("variable" = "Peptide"))
        
        #write.csv(uni_res_filt, file = paste(combo_list[[i]][1], "vs", combo_list[[i]][2], ".csv", sep = ""))
        uni_res_filt %>% 
                #mutate(across(-c(variable, status), round, digit=3)) %>%
                knitr::kable(., digits = 3, "html") %>%
                kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
                kableExtra::scroll_box(width = "100%", height = "500px")
}

```


#### Volcano plot

```{r message=FALSE, warning=FALSE, fig.dim=c(6, 6)}
# volcano plot
volcano_plot(uni_res_annotation, feature_col = "variable", fdr = FDR, log2fc = LOG2FC, save = FALSE)
```


#### Heatmap 

```{r message=FALSE, warning=FALSE, fig.dim=c(15, 10)}
# heatmap
anno <- data.frame(Label = as.factor(t(d5)[, "class"])) %>%
        dplyr::filter(Label %in% contrast ) %>%
        droplevels()

hm <- d5[-1, d5[1,] %in% contrast ] %>%
        rownames_to_column("variable") %>%
        mutate(across(-variable, as.numeric)) #%>%
        #left_join(., feature_meta, by = c("variable" = "Feature"))
        
heatmap(hm, feature_col = "variable", sample_anno = anno, feature_anno = feature_meta, feature_label = "Peptide", rowname_switch = TRUE, save = FALSE)
```


:::

### `r combo_list[[3]][1]` vs `r combo_list[[3]][2]`

::: {.panel-tabset}

#### Full stat 


```{r message=FALSE, warning=FALSE}
contrast = combo_list[[3]]

df = d5_mod %>%
    dplyr::filter(., Label %in% contrast ) %>%
    droplevels()

temp_d <- df %>%
        mutate(across(-Label, ~ 2^(.) )) %>% # d3_mod is log-scale number, this step will de-log and change data back to linear number
        group_by(Label) %>%
        summarise(across(everything(), mean))

print(paste("Order of Fold Change:", temp_d$Label[2], "over", temp_d$Label[1], sep = " "))

uni_res = do_univariate(df, order = c("No", "SP"))

uni_res <- uni_res %>%
        rowwise() %>%
        mutate(padj = min(c(BHT, BHW))) %>%
        # get the lowest padj
        ungroup() %>%
        mutate(`-log10padj` = -log10(padj))

uni_res_annotation = uni_res %>% left_join(., feature_meta, by = c("variable" = "Peptide"))

uni_res_annotation %>% 
        #mutate(across(-variable, round, digit=3)) %>%
        knitr::kable(., digits = 3, "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
        kableExtra::scroll_box(width = "100%", height = "500px")
```


#### Significant stat


```{r}
# get DE features only tibble
uni_res_filt <- uni_res %>%
        dplyr::filter(BHT < FDR & BHW < FDR) %>%
        mutate(status = case_when(`FC(log2)` < - 0.6 ~ "Down",
                                  `FC(log2)` > 0.6 ~ "Up") )

if (nrow(uni_res_filt) == 0){
        print(paste("There is no significant differentiated features between",
                    temp_d$Label[2], "and", temp_d$Label[1], sep = " "))
} else {
        uni_res_filt = uni_res_filt %>%
                left_join(., feature_meta, by = c("variable" = "Peptide"))
        
        #write.csv(uni_res_filt, file = paste(combo_list[[i]][1], "vs", combo_list[[i]][2], ".csv", sep = ""))
        uni_res_filt %>% 
                #mutate(across(-c(variable, status), round, digit=3)) %>%
                knitr::kable(., digits = 3, "html") %>%
                kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
                kableExtra::scroll_box(width = "100%", height = "500px")
}

```


#### Volcano plot

```{r message=FALSE, warning=FALSE, fig.dim=c(6, 6)}
# volcano plot
volcano_plot(uni_res_annotation, feature_col = "variable", fdr = FDR, log2fc = LOG2FC, save = FALSE)
```


#### Heatmap 

```{r message=FALSE, warning=FALSE, fig.dim=c(15, 10)}
# heatmap
anno <- data.frame(Label = as.factor(t(d5)[, "class"])) %>%
        dplyr::filter(Label %in% contrast ) %>%
        droplevels()

hm <- d5[-1, d5[1,] %in% contrast ] %>%
        rownames_to_column("variable") %>%
        mutate(across(-variable, as.numeric)) #%>%
        #left_join(., feature_meta, by = c("variable" = "Feature"))
        
heatmap(hm, feature_col = "variable", sample_anno = anno, feature_anno = feature_meta, feature_label = "Peptide", rowname_switch = TRUE, save = FALSE)
```


:::


:::


## All group heatmaps


::: {.panel-tabset .column-page-inset-right}



### Ordered


```{r fig.dim=c(25, 15)}
# for ordered column without clustering samples
col_order = c("No", "SP", "Iso")

# data wrangling for all group heatmap
norm_d2 = t(norm_d1) %>% as.data.frame()

norm_d3 = norm_d2 %>%
        arrange(factor(class, levels = col_order))

norm_d4 = t(norm_d3) %>% as.data.frame()
norm_d4_mod = norm_d4[-1,] %>%
        as.data.frame() %>%
        rownames_to_column(., var = "rowname") %>%
        mutate(across(-rowname, as.numeric)) %>%
        column_to_rownames(., var = "rowname")

anno <- data.frame(Label = as.factor(t(norm_d4)[, "class"]))
# levels() only change the name of each level, it doesn't reorder
# factor() to reorder factor level
anno$Label = factor(anno$Label, levels = col_order)
#levels(anno$Label)

rownames(norm_d4_mod) = feature_name$name

heatmap(norm_d4_mod, sample_anno = anno, sample_anno_col = "Label", feature_anno = feature_meta, feature_label = "Peptide", cluster_col_switch = FALSE, rowname_switch = TRUE, save = FALSE)

```


### Clustered


```{r fig.dim=c(25, 15)}
heatmap(norm_d4_mod, sample_anno = anno, sample_anno_col = "Label", feature_anno = feature_meta, feature_label = "Peptide", cluster_col_switch = TRUE, rowname_switch = TRUE, save = FALSE)
```

:::

## Reproducibility

The amount of time took to generate the report:


```{r time_spend}
Sys.time() - start_time
```


*R* session information:


```{r R_session}
sessionInfo()
```
